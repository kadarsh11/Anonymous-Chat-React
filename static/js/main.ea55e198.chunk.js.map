{"version":3,"sources":["logo.svg","app/card.js","app/chat.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Meta","Card","React","Component","Header","Layout","Sider","Footer","Content","TextArea","Input","Chat","props","state","is_chat_active","join_id","name","msg","chat","connect","pubnub","subscribe","channels","getMessage","ui","chats","message","by","style","key","timmetoken","span","push","setState","send","console","log","publish","channel","sendByPost","storeInHistory","status","response","renderChatScreen","height","avatar","src","title","onChange","_","target","value","placeholder","autoSize","minRows","maxRows","type","onClick","onConnect","meta","renderJoinScreen","prefix","color","suffix","initializePubNub","this","PubNubReact","publishKey","subscribeKey","init","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+IAAAA,EAAOC,QAAU,IAA0B,kC,+MCGnCC,EAASC,IAATD,K,GAEmCE,IAAMC,U,4ECDzCC,EAAmCC,IAAnCD,OAAgBE,GAAmBD,IAA3BE,OAA2BF,IAAnBC,OAAOE,EAAYH,IAAZG,QACvBC,EAAaC,IAAbD,SACAT,EAASC,IAATD,KAEaW,E,YAUpB,WAAYC,GAAQ,IAAD,8BAClB,4CAAMA,KATPC,MAAM,CACLC,gBAAe,EACfC,QAAQ,GACRC,KAAK,GACLC,IAAI,GACJC,KAAK,IAGa,EAKhBC,QAAQ,WAAK,IAAD,EACQ,EAAKN,MAAnBE,EADM,EACNA,QAAQC,EADF,EACEA,KAEZ,EAAKI,OAAOC,UAAU,CAChBC,SAAU,CAACP,EAAD,UAAYA,EAAZ,YAGd,EAAKK,OAAOG,WAAWR,GAAS,SAACE,GAC7B,IAAIO,EAAG,KACHC,EAAM,EAAKZ,MAAMK,KAEpBM,EADEP,EAAIS,QAAQC,IAAMX,EACf,kBAAC,IAAD,CAAKY,MAAO,CAAC,aAAe,QAASC,IAAKZ,EAAIa,YACvD,kBAAC,IAAD,CAAKC,KAAM,KACX,kBAAC,IAAD,CAAKA,KAAM,GAAIH,MAAO,CAAC,gBAAkB,SAAUX,EAAIS,QAAQT,MAGvD,kBAAC,IAAD,CAAKW,MAAO,CAAC,aAAe,QAASC,IAAKZ,EAAIa,YACrD,kBAAC,IAAD,CAAKC,KAAM,GAAIH,MAAO,CAAC,gBAAkB,SAAUX,EAAIS,QAAQT,KAC/D,kBAAC,IAAD,CAAKc,KAAM,MAGTN,EAAMO,KAAKR,GACX,EAAKS,SAAS,CACbf,KAAKO,QA5BE,EAyCnBS,KAAK,WAAK,IAAD,EACe,EAAKrB,MAAvBI,EADG,EACHA,IAAID,EADD,EACCA,KAAKD,EADN,EACMA,QACdoB,QAAQC,IAAI,UAAUnB,GACtB,EAAKG,OAAOiB,QACR,CACIX,QAAS,CACLC,GAAIX,EACJC,IAAKA,GAETqB,QAASvB,EACTwB,YAAY,EACZC,gBAAgB,IAEpB,SAACC,EAAQC,GACRP,QAAQC,IAAI,cAAcM,OAvDb,EA8DnBC,iBAAiB,WAEhB,OACE,yBAAKf,MAAO,CAAC,gBAAkB,UAAU,OAAS,QAAQ,OAAS,SAClE,kBAAC,IAAD,KACK,kBAACxB,EAAD,CAAQwB,MAAO,CAAC,MAAQ,QAAQgB,OAAO,SAAvC,kBACA,kBAAC,IAAD,CAAQhB,MAAO,CAAC,OAAS,SACvB,kBAACtB,EAAD,CAAOsB,MAAO,CAAC,eAAe,MAAM,gBAAgB,QACzD,kBAAC,EAAD,CACCA,MAAO,CAAC,gBAAkB,UAAU,gBAAgB,MAAM,aAAa,QACvEiB,OAAQ,kBAAC,IAAD,CAAQC,IAAI,qEACpBC,MAAM,iBAGP,kBAAC,EAAD,CACCnB,MAAO,CAAC,gBAAkB,UAAU,gBAAgB,MAAM,aAAa,QACvEiB,OAAQ,kBAAC,IAAD,CAAQC,IAAI,qEACpBC,MAAM,aAIF,kBAACvC,EAAD,KACC,yBAAKoB,MAAO,CAAC,OAAS,OAAO,OAAS,SACrC,yBAAKA,MAAO,CAAC,OAAS,OAAO,gBAAkB,SAAS,OAAS,QAC9D,EAAKf,MAAMK,MAEd,kBAAC,IAAD,KACL,kBAAC,IAAD,CAAKa,KAAM,IACV,kBAACtB,EAAD,CACEuC,SAAU,SAACC,GAAD,OAAK,EAAKpC,MAAMI,IAAIgC,EAAEC,OAAOC,OACpCC,YAAY,qBACZC,SAAU,CAAEC,QAAS,EAAGC,QAAS,MAGvC,kBAAC,IAAD,CAAKxB,KAAM,GACV,kBAAC,IAAD,CAAQyB,KAAK,UAAUC,QAAS,kBAAI,EAAKvB,SAAzC,gBAjGU,EAiHnBwB,UAAU,WAAK,IAAD,EACG,EAAK7C,MAAhBG,EADQ,EACRA,KAAMC,EADE,EACFA,IAEX,EAAKG,OAAOiB,QACR,CACIX,QAAS,CACLC,GAAIX,EACJC,IAAKA,EAAID,GAEbsB,QAAS,OACTC,YAAY,EACZC,gBAAgB,EAChBmB,KAAM,CACF,KAAQ,UAGhB,SAAClB,EAAQC,GACRP,QAAQC,IAAI,cAAcM,GAC1BP,QAAQC,IAAI,cAAcK,OAnIb,EA2InBmB,iBAAiB,WAChB,OACC,yBAAKhC,MAAO,CAAC,gBAAkB,UAAU,OAAS,QAAQ,OAAS,SACjE,yBAAKA,MAAO,CAAC,MAAQ,MAAM,mBAAmB,SAC7C,kBAAC,IAAD,CACEoB,SAAU,SAACC,GAAD,OAAK,EAAKpC,MAAMG,KAAKiC,EAAEC,OAAOC,OACrCC,YAAY,iBACZS,OAAQ,kBAAC,IAAD,CAAML,KAAK,OAAO5B,MAAO,CAAEkC,MAAO,qBAC1CC,OACE,kBAAC,IAAD,CAAShB,MAAM,qBACb,kBAAC,IAAD,CAAMS,KAAK,cAAc5B,MAAO,CAAEkC,MAAO,wBAIlD,kBAAC,IAAD,CACEd,SAAU,SAACC,GAAD,OAAK,EAAKpC,MAAME,QAAQkC,EAAEC,OAAOC,OACxCC,YAAY,uBACZS,OAAQ,kBAAC,IAAD,CAAML,KAAK,OAAO5B,MAAO,CAAEkC,MAAO,qBAC1CC,OACE,kBAAC,IAAD,CAAShB,MAAM,qBACb,kBAAC,IAAD,CAAMS,KAAK,cAAc5B,MAAO,CAAEkC,MAAO,wBAI/C,kBAAC,IAAD,CAAQL,QAAS,WAChB,EAAKtC,UACL,EAAKc,SAAS,CAACnB,gBAAe,KAC5B0C,KAAK,UAAU5B,MAAO,CAAC,aAAa,SAHvC,cAjKN,EAAKoC,mBAFY,E,gFAkCfC,KAAK7C,OAAS,IAAI8C,IAAY,CACvBC,WAAY,6CACZC,aAAc,+CAElBH,KAAK7C,OAAOiD,KAAKJ,Q,+BAuIf,IACFnD,EAAmBmD,KAAKpD,MAAxBC,eACN,OACC,6BACGA,EAAiBmD,KAAKtB,mBAAqBsB,KAAKL,wB,GA3LpB1D,IAAMC,WCWzBmE,MAZf,WACE,OACI,yBAAKC,UAAU,OAIX,kBAAC,EAAD,QCDUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ea55e198.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react'\nimport { Skeleton, Switch, Card, Icon, Avatar, List } from 'antd';\n\nconst { Meta } = Card;\n\nexport default class CardComponent extends React.Component{\n\n\tstate = {\n\t    loading: true,\n  \t};\n\n  \tdata = [\n  {\n    title: 'Title 1',\n  },\n  {\n    title: 'Title 2',\n  },\n  {\n    title: 'Title 3',\n  },\n  {\n    title: 'Title 4',\n  },\n];\n\n  onChange = checked => {\n    this.setState({ loading: !checked });\n  };\n\n  cardView = () =>{\n  \tconst { loading } = this.state;\n  \treturn (\n  \t\t<Card\n          style={{ marginTop: 16 }}\n          actions={[\n            <Icon type=\"setting\" key=\"setting\" />,\n            <Icon type=\"edit\" key=\"edit\" />,\n            <Icon type=\"ellipsis\" key=\"ellipsis\" />,\n          ]}\n        >\n          <Skeleton loading={loading} avatar active>\n            <Meta\n              avatar={\n                <Avatar src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\" />\n              }\n              title=\"Card title\"\n              description=\"This is the description\"\n            />\n          </Skeleton>\n        </Card>);\n  }\n\n  render() {\n\tconst { loading } = this.state;\n    return (\n     <div>\n     \t<h1>Hello World</h1>\n\t     <Switch checked={!loading} onChange={this.onChange} />\n\t     <List\n\t\t    grid={{ gutter: 16, column: 3 }}\n\t\t    dataSource={this.data}\n\t\t    renderItem={item => (\n\t\t      <List.Item>\n\t\t       {this.cardView()}\n\t\t      </List.Item>\n\t\t    )}\n\t\t />\n     </div>\n    );\n  }\n}","import React from 'react'\nimport PubNubReact from 'pubnub-react';\n\nimport { Input, Tooltip, Icon, Button, Layout, Row, Col, Card, Avatar} from 'antd';\nconst { Header, Footer, Sider, Content } = Layout;\nconst { TextArea } = Input;\nconst { Meta } = Card;\n\nexport default class Chat extends React.Component{\n\n\tstate={\n\t\tis_chat_active:false,\n\t\tjoin_id:\"\",\n\t\tname:\"\",\n\t\tmsg:\"\",\n\t\tchat:[]\n\t}\n\n\tconstructor(props) {\n\t super(props);\n\t \tthis.initializePubNub()\n\t}\n\n    connect=()=>{\n    \tlet {join_id,name}=this.state\n\n    \t this.pubnub.subscribe({\n            channels: [join_id,`${join_id}-data`]\n        });\n  \n        this.pubnub.getMessage(join_id, (msg) => {\n            let ui=null;\n            let chats=this.state.chat\n            if(msg.message.by == name){\n            \tui = <Row style={{'marginBottom':'10px'}} key={msg.timmetoken}>\n\t\t\t      <Col span={12}></Col>\n\t\t\t      <Col span={12} style={{'backgroundColor':'pink'}}>{msg.message.msg}</Col>\n\t\t\t    </Row>\n            }else{\n            \tui= <Row style={{'marginBottom':'10px'}} key={msg.timmetoken}>\n\t\t\t\t      <Col span={12} style={{'backgroundColor':'pink'}}>{msg.message.msg}</Col>\n\t\t\t\t      <Col span={12}></Col>\n\t\t\t\t    </Row>\n            }\n            chats.push(ui)\n            this.setState({\n            \tchat:chats\n            })\n        });\n    }\n\n    initializePubNub(){\n    \tthis.pubnub = new PubNubReact({\n            publishKey: 'pub-c-c64d0b2d-2349-4e51-9231-b04f77fa59b2',\n            subscribeKey: 'sub-c-360a7838-eebc-11e9-bdee-36080f78eb20'\n        });\n        this.pubnub.init(this);\n    }\n\n\tsend=()=>{\n\t\tlet {msg,name,join_id}=this.state\n\t\tconsole.log(\"CONNECT\",msg)\n\t\tthis.pubnub.publish(\n\t\t    {\n\t\t        message: {\n\t\t            by: name,\n\t\t            msg: msg\n\t\t        },\n\t\t        channel: join_id,\n\t\t        sendByPost: false, \n\t\t        storeInHistory: false\n\t\t    },\n\t\t    (status, response) => {\n\t\t    \tconsole.log(\"My Response\",response)\n\t\t    }\n\t\t)\n\t}\n\n\n\n\trenderChatScreen=()=>{\n\n\t\treturn (\n\t\t\t\t<div style={{'backgroundColor':\"#ecf0f1\",'height':'100vh','margin':'auto'}}>\n\t\t\t\t\t<Layout>\n\t\t\t\t      <Header style={{'color':'white',height:'60px'}}>Chat anonymous</Header>\n\t\t\t\t      <Layout style={{'height':'89vh'}}>\n\t\t\t\t        <Sider style={{'padding-left':'5px','padding-right':'5px'}}>\n\t\t\t\t\t\t\t<Meta\n\t\t\t\t\t\t\t\tstyle={{'backgroundColor':\"#ecf0f1\",'border-radius':'5px','margin-top':'10px'}}\n\t\t\t\t\t\t\t\tavatar={<Avatar src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\"/>}\n\t\t\t\t\t\t\t\ttitle=\"Adarsh Kumar\"\n\t\t\t\t\t\t\t\t// description=\"Joined at 19:17:23PM \"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<Meta\n\t\t\t\t\t\t\t\tstyle={{'backgroundColor':\"#ecf0f1\",'border-radius':'5px','margin-top':'10px'}}\n\t\t\t\t\t\t\t\tavatar={<Avatar src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\" />}\n\t\t\t\t\t\t\t\ttitle=\"Phoolan\"\n\t\t\t\t\t\t\t\t// description=\"Joined at 19:17:23PM\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t        </Sider>\n\t\t\t\t        <Content>\n\t\t\t\t        \t<div style={{'margin':'10px','height':'100%'}}>\n\t\t\t\t        \t\t<div style={{'margin':'10px','backgroundColor':'orange','height':'90%'}}>\n\t\t\t\t        \t\t\t\t{this.state.chat}\n\t\t\t\t        \t\t</div>\n\t\t\t\t        \t\t<Row>\n\t\t\t\t\t\t\t\t\t<Col span={20}>\n\t\t\t\t\t\t\t\t\t\t<TextArea\n\t\t\t\t\t\t\t\t\t\t  onChange={(_)=>this.state.msg=_.target.value}\n\t\t\t\t\t\t\t\t\t      placeholder=\"Enter your message\"\n\t\t\t\t\t\t\t\t\t      autoSize={{ minRows: 2, maxRows: 4 }}\n\t\t\t\t\t\t\t\t\t    /> \n\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t<Col span={4}>\n\t\t\t\t\t\t\t\t\t\t<Button type=\"primary\" onClick={()=>this.send()}>Send</Button>\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t// <Button type=\"primary\" onClick={()=>this.send(\"phoolan\")}>Send by Phoolan</Button>\n\t\t\t\t\t\t\t\t\t\t\t// <Button type=\"primary\" onClick={this.connect}>Connect</Button>\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t        \t\t</Row>\n\t\t\t\t        \t</div>\n\t\t\t\t        </Content>\n\t\t\t\t      </Layout>\n\t\t\t\t    </Layout>\n\t\t\t\t</div>\n\t\t\t)\n\t}\n\n\tonConnect=()=>{\n\t\tlet {name, msg}=this.state\n\n\t\tthis.pubnub.publish(\n\t\t    {\n\t\t        message: {\n\t\t            by: name,\n\t\t            msg: msg+name\n\t\t        },\n\t\t        channel: '1111',\n\t\t        sendByPost: false, \n\t\t        storeInHistory: false, \n\t\t        meta: {\n\t\t            \"cool\": \"meta\"\n\t\t        } \n\t\t    },\n\t\t    (status, response) => {\n\t\t    \tconsole.log(\"My Response\",response)\n\t\t    \tconsole.log(\"My Response\",status)\n\t\t    }\n\t\t)\n\t\t// this.setState({\n\t\t// \tis_chat_active:true\n\t\t// })\n\t}\n\n\trenderJoinScreen=()=>{\n\t\treturn (\n\t\t\t<div style={{'backgroundColor':\"#ecf0f1\",'height':'100vh','margin':'auto'}}>\n\t\t\t\t\t<div style={{'width':'30%','padding-vertical':'20px'}}>\n\t\t\t\t\t\t<Input\n\t\t\t\t\t\t  onChange={(_)=>this.state.name=_.target.value}\n\t\t\t\t\t      placeholder=\"Your good name\"\n\t\t\t\t\t      prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n\t\t\t\t\t      suffix={\n\t\t\t\t\t        <Tooltip title=\"Extra information\">\n\t\t\t\t\t          <Icon type=\"info-circle\" style={{ color: 'rgba(0,0,0,.45)' }} />\n\t\t\t\t\t        </Tooltip>\n\t\t\t\t\t      }\n\t\t\t\t\t    />\n\t\t\t\t\t\t<Input\n\t\t\t\t\t\t  onChange={(_)=>this.state.join_id=_.target.value}\n\t\t\t\t\t      placeholder=\"Enter Joining Number\"\n\t\t\t\t\t      prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n\t\t\t\t\t      suffix={\n\t\t\t\t\t        <Tooltip title=\"Extra information\">\n\t\t\t\t\t          <Icon type=\"info-circle\" style={{ color: 'rgba(0,0,0,.45)' }} />\n\t\t\t\t\t        </Tooltip>\n\t\t\t\t\t      }\n\t\t\t\t\t    />\t\n\t\t\t\t\t    <Button onClick={()=>{\n\t\t\t\t\t    \tthis.connect()\n\t\t\t\t\t    \tthis.setState({is_chat_active:true})\n\t\t\t\t\t    }} type=\"primary\" style={{'margin-top':'20px'}}>Primary</Button>\n\t\t\t\t\t</div>\n\t\t\t\t\t\n\t\t\t</div>\n\t\t\t)\n\t}\n\n\trender(){\n\t\tlet { is_chat_active } = this.state\n\t\treturn(\n\t\t\t<div>\n\t\t\t\t{ is_chat_active ? this.renderChatScreen() : this.renderJoinScreen()}\n\n\t\t\t</div>\n\t\t)\n\t}\n}","import React from 'react';\nimport logo from './logo.svg';\nimport CardComponent from './app/card'\nimport './App.css';\nimport { Route,Router } from \"react-router\";\nimport Chat from './app/chat'\n\nfunction App() {\n  return (\n      <div className=\"App\">\n          {\n            //<CardComponent />\n          }\n          <Chat/>\n\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}